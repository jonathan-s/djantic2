[tool.poetry]
name = "djantic2"
version = "1.0.1"
description = "Pydantic models for Django"
authors = [
  "Jonathan Sundqvist <git@co.argpar.se>",
  "Jordan Eremieff <jordan@eremieff.com>",
]
license = "MIT"
packages = [{ include = "djantic" }]

[tool.poetry.dependencies]
python = "^3.8"
pydantic = "^2.6.2"
Django = ">3,<6"

[tool.poetry.group.dev.dependencies]
ruff = "^0.3.7"
setuptools = "^65.5.1"
twine = "^3.4.1"
wheel = "^0.38.1"
mypy = "^0.910"
pytest = "^6.2.4"
pytest-cov = "^2.12.1"
codecov = "^2.1.11"
mkdocs = "^1.2.3"
mkdocs-material = "^7.1.10"
mkautodoc = "^0.1.0"
Pygments = "^2.9.0"
pymdown-extensions = "^8.2"
rich = "^10.6.0"
django-stubs = "^1.8.0"
pytest-django = "^4.4.0"
psycopg2-binary = "^2.9.1"
bump2version = "^1.0.1"
factory-boy = "^3.2.1"


[tool.ruff]
line-length = 88
exclude = ['.git', '__pycache__', '__init__.py', '.mypy_cache', '.pytest_cache']
lint.select = [
  "E",  # pycodestyle errors
  "W",  # pycodestyle warnings
  "F",  # pyflakes
  "I",  # isort
  "C",  # flake8-comprehensions
  "B",  # flake8-bugbear
  "UP", # pyupgrade
]
lint.ignore = [
  "E501", # line too long
  "C901", # Comprehension is too complex (11 > 10)
  "W191", # indentation contains tabs
  "E402",
  "E203",
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
